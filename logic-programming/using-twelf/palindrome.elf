% consider alphabet {a,b,c}
symbol : type.

a : symbol.
b : symbol.
c : symbol.

symb : symbol -> type.
%mode symb -S.

s/a : symb a.
s/b : symb b.
s/c : symb c.

word : type.

nil : word.
# : symbol -> word -> word. %infix right 8 #.

% define snoc
% which takes a symbol S and a word W and generates the word appending S to W
snoc : symbol -> word -> word -> type.
snoc\base : snoc S nil (S # nil).
snoc\rec : snoc S Wt Wr -> snoc S (T # Wt) (T # Wr).
%mode snoc +S +W -R.
%query 1 1 snoc c (a # b # nil) W.
%query 1 1 snoc c (b # nil) W.


% using natural numbers

nat : type.  %name nat N.
z : nat.
s : nat -> nat.
0 = z.
1 = s z.
2 = s 1.
3 = s 2.
4 = s 3.
5 = s 4.
6 = s 5.

%{
Define
palin : nat -> word -> type.

that given N even generates all palindrome words of length N
Given N = 2
a # a # nil     // "aa"
b # b # nil     // "bb"
c # c # nil     // "cc"

Given N = 4

a # a # a # a # nil     b # a # a # b # nil     c # a # a # c # nil
a # b # b # a # nil     b # b # b # b # nil     c # b # b # c # nil
a # c # c # a # nil     b # c # c # b # nil.    c # c # c # c # nil.

Note that each word of length 2 generates 3 palindrome words of length 4
"aa" generates "aaaa", "baab", "caac" because a b and c are added at each side

Use snoc defined above
}%

palin : nat -> word -> type.
palin\base : palin 0 nil.
palin\rec : snoc S W W' -> symb S -> palin N W -> palin (s (s N)) (S # W').
%mode palin +N -W.
%query 9 * palin 4 Xs.
