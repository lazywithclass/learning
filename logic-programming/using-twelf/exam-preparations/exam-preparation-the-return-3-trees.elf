nat : type.
succ : nat -> nat.
0 : nat.
1 = succ 0.
2 = succ 1.
3 = succ 2.
4 = succ 3.
5 = succ 4.
6 = succ 5.
7 = succ 6.
8 = succ 7.
9 = succ 8.

natList : type.
# : nat -> natList -> natList. %infix right 6 #.
nil : natList.

natTree : type.
natNode : nat -> natTree -> natTree -> natTree.
leaf : natTree.

%       1
%   2        5
% 3   4    6
%
% preorder is 1 2 3 4 5 6

l = natNode 2 (natNode 3 leaf leaf) (natNode 4 leaf leaf).
r = natNode 5 (natNode 6 leaf leaf) leaf.
t = natNode 1 l r.

append : natList -> natList -> natList -> type.
append\nil : append nil A A.
append\rec : append A B C -> append (X # A) B (X # C).
%mode append +A +B -C.
%query 1 * append (1 # 2 # nil) (3 # 4 # nil) C.

preorder : natTree -> natList -> type.
preorder\leaf : preorder leaf nil.
preorder\rec : append Ls Rs Ns ->
                 preorder LT Ls ->
                 preorder RT Rs ->
                 preorder (natNode N LT RT) (N # Ns).
%mode preorder +T -L.
%query 1 * preorder t L.


postorder : natTree -> natList -> type.
postorder\leaf : postorder leaf nil.
postorder\rec : append Ns (N # nil) Ns' ->
                  append Ls Rs Ns ->
                  postorder LT Ls ->
                  postorder RT Rs ->
                  postorder (natNode N LT RT) Ns'.
%mode postorder +T -L.
%query 1 * postorder t L.

% preorder without append using an accumulator
preorder' : natTree -> natList -> natList -> type.
preorder'\leaf : preorder' leaf A A.
% left this behind, I wasn't able to code that, too difficult :(

% define a tail recursive reverse based on
% rev_aux : natList -> natList -> natList -> type.

xs = 1 # 2 # 3 # 4 # nil.

revAux : natList -> natList -> natList -> type.
revAux\base : revAux nil A A.
revAux\rec : revAux Xs (X # A) T ->
              revAux (X # Xs) A T.
%mode revAux +Xs +A -T.
%query 1 * revAux xs nil T.

revTail : natList -> natList -> type.
revTail\r : revAux Xs nil Res -> revTail Xs Res.
%mode revTail +Xs -T.
%query 1 * revTail xs T.

plus : nat -> nat -> nat -> type.
plus\base : plus A 0 A.
plus\rec : plus A B C -> plus A (succ B) (succ C).
%mode plus +A +B -C.
%query 1 * plus 1 2 S.
%query 1 * plus 0 1 S.

len : natList -> nat -> type.
len\nil : len nil 0.
len\rec : len Xs L -> len (X # Xs) (succ L).
%mode len +Xs -L.
%query 1 * len (1 # 2 # 3 # nil) L.

prefix : natList -> natList -> type.
prefix\nil : prefix nil Xs.
prefix\rec : prefix P Xs -> prefix (X # P) (X # Xs).
%mode prefix +P +Xs.
%query 1 * prefix (1 # 2 # nil) (1 # 2 # 3 # nil).
%query 0 * prefix (3 # 2 # nil) (1 # 2 # 3 # nil).

% write prefix in terms of append
prefixApp : natList -> natList -> type.
prefixApp\nil : prefixApp nil Xs.
prefixApp\rec : append Pref Rest Xs -> prefixApp Pref Xs.
%mode append +P -R +Xs.
%mode prefixApp +P +Xs.
%query 1 * prefixApp (1 # 2 # nil) (1 # 2 # 3 # nil).
%query 0 * prefixApp (3 # 2 # nil) (1 # 2 # 3 # nil).

lte : nat -> nat -> type.
lte\base : lte 0 A.
lte\rec : lte A B -> lte (succ A) (succ B).
%mode lte +A +B.
%query 1 * lte 0 4.
%query 1 * lte 0 0.
%query 0 * lte 1 0.

ordered : natList -> type.
ordered\nil : ordered nil.
ordered\rec : lte A B -> ordered Xs -> ordered (A # B # Xs).
%mode ordered +Xs.
%query 1 * ordered (1 # 2 # 4 # 7 # nil).
%query 0 * ordered (4 # 1 # 2 # 4 # 7 # nil).

% remove all duplicates from a list
neq : nat -> nat -> type.
neq\0 : neq 0 (succ N).
neq\0' : neq (succ N) 0.
neq\rec : neq A B -> neq (succ A) (succ B).
%mode neq +A +B.
%query 1 * neq 0 1.
%query 0 * neq 1 1.
%query 1 * neq 7 5.

contains : nat -> natList -> type.
contains\base : contains X (X # _).
contains\rec : contains X Xs -> contains X (_ # Xs).
%mode contains +N +Xs.
%query 1 * contains 2 (2 # nil).
%query 1 * contains 2 (1 # 2 # nil).

% but for asSet we need not contains!

notContains : nat -> natList -> type.
notContains\base : notContains N nil.
notContains\rec : notContains N Xs -> neq N M ->  notContains N (M # Xs).
%mode notContains +N +Xs.
%query 1 * notContains 2 (1 # 3 # nil).
%query 0 * notContains 1 (1 # 3 # nil).

asSet : natList -> natList -> type.
asSet\nil : asSet nil nil.
asSet\rec : asSet L S -> notContains N L -> asSet (N # L) (N # S).
asSet\rec2 : asSet L S -> contains N L -> asSet (N # L) S.
%mode asSet +L -S.
%query 1 * asSet (1 # 2 # 3 # 4 # nil) S.
%query 1 * asSet (2 # 2 # 3 # 4 # nil) S.
