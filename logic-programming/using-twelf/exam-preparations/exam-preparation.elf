nat : type.
natlist : type.
nil : natlist.

cons : nat -> natlist -> natlist.

succ : nat -> nat.
z : nat.
1 = succ z.
2 = succ 1.
3 = succ 2.
4 = succ 3.
5 = succ 4.
6 = succ 5.
7 = succ 6.
8 = succ 7.
9 = succ 8.
10 = succ 9.

% define len : natlst -> nat -> type
% can it be used with %mode len -Xs +N ?
len : natlist -> nat -> type.
len\0 : len nil z.
len\rec : len Xs L -> len (cons _ Xs) (succ L).
% One could also write mode len +Xs +N.
%mode len +Xs -N.
%query 1 1 len (cons 1 (cons 2 (cons 3 nil))) L.

% %mode len -Xs +N.
% %query 1 1 len Xs 3.
% so we cannot use it with %mode len -Xs +N.
% because using * we allow variables in the query result
%mode len *Xs +N.
%query 1 1 len Xs 3.


% define prefix natlist -> natlist -> type.
prefix : natlist -> natlist -> type.
prefix\nil : prefix nil Ys.
prefix\rec : prefix Xs Ys -> prefix (cons X Xs) (cons X Ys).
%mode prefix +Xs +Ys.
%query 1 1 prefix nil (cons 1 (cons 2 nil)).
%query 0 1 prefix (cons 2 nil) (cons 1 (cons 2 nil)).
%query 1 1 prefix (cons 1 nil) (cons 1 (cons 2 (cons 3 nil))).
%query 1 1 prefix (cons 1 (cons 2 nil)) (cons 1 (cons 2 (cons 3 nil))).

% give the definition of append
% in append the second list is appended at the end of the first
append : natlist -> natlist -> natlist -> type.
append\nil : append nil Xs Xs.
append\rec : append Xs Ys Zs -> append (cons X Xs) Ys (cons X Zs).
%mode append +Xs +Ys -Zs.
%query 1 1 append (cons 1 (cons 2 (cons 3 nil))) (cons 4 (cons 5 (cons 6 nil))) Zs.
% append [1,2,3] [4,5,6] [1,2,3,4,5,6]
%mode append +Xs -Ys +Zs.
%query 1 1 append (cons 1 (cons 2 nil)) Ys (cons 1 (cons 2 (cons 3 nil))).
%mode append -Xs -Ys +Zs.
%query 3 3 append Xs Ys (cons 1 (cons 2 (cons 3 nil))).

% define prefix in terms of append
prefixApp : natlist -> natlist -> type.
prefixApp\base : append Heads Rests List -> prefixApp Heads List.
%mode append -Xs -Ys +Zs.
%mode prefixApp -Xs +Ys.
%query 3 3 prefixApp Xs (cons 1 (cons 2 nil)).

% define ordered predicate using less or equal
leq : nat -> nat -> type.
leq\base : leq z _.
leq\rec : leq X Y -> leq (succ X) (succ Y).
%mode leq +X +Y.
%query 1 1 leq 3 4.

ordered : natlist -> type.
ordered\nil : ordered nil.
ordered\base : ordered (cons _ nil).
ordered\rec : ordered (cons X Xs) -> leq Y X -> ordered (cons Y (cons X Xs)).
%mode ordered +Xs.
%query 1 1 ordered (cons 1 (cons 2 (cons 3 nil))).
%query 0 1 ordered (cons 4 (cons 2 (cons 3 nil))).


% delete removes the first occurrence of a nat from a natlist
delete : nat -> natlist -> natlist -> type.
delete\base : delete X (cons X Xs) Xs.
%query 1 1 delete 3 (cons 3 (cons 2 nil)) R.
delete\rec : delete X Xs Ys -> delete X (cons Y Xs) (cons Y Ys).
%mode delete +X +Xs -Ys.
%query 1 1 delete 2 (cons 3 (cons 2 (cons 1 nil))) R.

% the empty list is a permutation of itself
% if Ps1 is a permutation of Xs and Ps is the result of inserting X into Ps1 then Ps
% is a permutation of (cons X Xs)
perm : natlist -> natlist -> type.
p/n: perm nil nil.
p/c: delete X Ps Ps1 ->
       perm Xs Ps1 ->
       perm (cons X Xs) Ps.
%mode delete +X -Xs +Ys.
%mode perm +L -Ps.
%query 6 6 perm (cons 1 (cons 2 (cons 3 nil))) P.

% define slowsort which generates all permutations and looks for one that is sorted
slowsort : natlist -> natlist -> type.
slowsort\J : ordered P -> perm Xs P -> slowsort Xs P.
%mode ordered +P.
%mode perm +Xs -P.
%mode slowsort +Xs -S.
%query 1 1 slowsort (cons 5 (cons 7 (cons 3 (cons 1 (cons 2 nil))))) S.

% implements F#'s List.zip
tup : type.
tuple : nat -> nat -> tup.
tuplist : type.
niltup : tuplist.
constup : tup -> tuplist -> tuplist.

zip : natlist -> natlist -> tuplist -> type.
zip\base : zip nil nil niltup.
zip\rec : zip Xs Ys Ts -> zip (cons X Xs) (cons Y Ys) (constup (tuple X Y) Ts).

t1 = tuple 2 3.
l1 = (constup t1 (constup (tuple 4 5) niltup)).

%mode zip +Xs +Ys -Ts.
%query 1 1 zip (cons 1 (cons 3 (cons 5 nil))) (cons 2 (cons 4 (cons 6 nil))) Z.
%mode zip -Xs -Ys +Ts.
%query 1 1 zip Xs Ys (constup (tuple 1 2) (constup (tuple 3 4) (constup (tuple 5 6) niltup))).

eq : nat -> nat -> type.
eq\base : eq z z.
eq\rec : eq X Y -> eq (succ X) (succ Y).
%mode eq +X +Y.
%query 0 1 eq 2 3.
%query 1 1 eq 2 2.

% code zip that works on list with different size
zip2 : natlist -> natlist -> tuplist -> type.
zip2\base : zip2 nil nil niltup.
zip2\baseX : zip2 (cons X Xs) nil niltup.
zip2\baseY : zip2 nil (cons Y Ys) niltup.
zip2\rec : zip2 Xs Ys Ts -> zip2 (cons X Xs) (cons Y Ys) (constup (tuple X Y) Ts).
%query 1 1 zip2 (cons 1 (cons 3 (cons 5 nil))) (cons 2 (cons 4 (cons 6 nil))) Z.

% define insertion sort
sinsert : nat -> natlist -> natlist -> type.
si/nil: sinsert X nil (cons X  nil).
si/1: sinsert Y (cons X Xs) (cons Y (cons X Xs))
       <- leq Y X.
si/2 : sinsert Y (cons X Xs) (cons X Rs)
        <- leq X Y
        <- sinsert Y Xs Rs.
%mode sinsert +X +Xs -Rs.
%query 1 1 sinsert 2 (cons 3 (cons 4 nil)) S.

isort : natlist -> natlist -> type.
i/n: isort nil nil.
i/l : isort (cons X Xs) Ss
       <- isort Xs Ts
       <- sinsert X Ts Ss.
%mode isort +L -Ps.
%query 1 1 isort (cons 4 (cons 5 (cons 1 (cons 2 nil)))) Sorted.
