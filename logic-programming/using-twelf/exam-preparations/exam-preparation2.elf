colour: type.
b : colour.  % blue
r : colour.  % red

clist : type.  %name clist Xs.
nil   : clist.
#     : colour -> clist -> clist. %infix right 6 #.

nat : type.    %name nat N.
z   : nat.
s   : nat -> nat.
0 = z.
1 = s z.
2 = s 1.
3 = s 2.
4 = s 3.
5 = s 4.
6 = s 5.

% define a relation gen : nat -> clist -> type
% such that given a nat k it creates a list of len k

len : clist -> nat -> type.
len\base : len nil 0.
len\rec : len Cs L -> len (C # Cs) (s L).
%mode len +Cs -L.
%query 1 1 len (b # (r # (r # nil))) L.

gen : nat -> clist -> type.
gen\base : gen 0 nil.
gen\recR : gen L Cs -> gen (s L) (r # Cs).
gen\recB : gen L Cs -> gen (s L) (b # Cs).
%mode gen +L -Cs.
%query 8 8 gen 3 Cs.


neq : colour -> colour -> type.
neq\rb : neq r b.
neq\br : neq b r.

% a clist is considered ok if a colour appears 3+ times in a row
okclist : clist -> type.
okclist\base : okclist (C # C # C # _).
okclist\rec : neq D C -> okclist (D # C # C # C # _).
%mode neq +C +D.
%mode okclist +Cs.
%query 1 1 okclist (r # r # r # nil).
%query 0 1 okclist (r # r # b # nil).
%query 1 1 okclist (r # r # r # b # nil).
%query 1 1 okclist (b # r # r # r # b # nil).

% define the relation gengood that only generates good clist
gengood : nat -> clist -> type.
gengood\rec : okclist Cs -> gen N Cs -> gengood N Cs.
%mode gengood +N -Cs.
%query 6 * gengood 4 Cs.
% should be 38
%query 24 * gengood 6 Cs.
