colour : type.

b : colour.
r : colour.

clist : type.
nil : clist.
# : colour -> clist -> clist. %infix right 6 #.

nat : type.
succ : nat -> nat.
z : nat.
0 = z.
1 = succ z.
2 = succ 1.
3 = succ 2.
4 = succ 3.
5 = succ 4.
6 = succ 5.
7 = succ 6.
8 = succ 7.
9 = succ 8.


% count the occurrences of b (blue) and r (red)
count : clist -> nat -> nat -> type.
count\base : count nil 0 0.
count\recB : count Cs B R -> count (b # Cs) (succ B) R.
count\recR : count Cs B R -> count (r # Cs) B (succ R).
%mode count +Cs -B -R.
%query 1 1 count (r # r # b # r # nil) B R.

% a colored list is uniform if all elements have the same colour or if the number
% of blues is equal to the number of reds
% define uniform which recognises if a clist if uniform or not
uniform : clist -> type.
uniform\base : uniform nil.
uniform\rec : count Cs K K -> uniform Cs.
uniform\recAllR : count Cs K 0 -> uniform Cs.
uniform\recAllB : count Cs 0 K -> uniform Cs.
%mode uniform +Cs.
%query 1 1 uniform (b # b # b # nil).
%query 1 1 uniform (r # r # r # r # nil).
%query 1 1 uniform (r # r # b # r # b # b # nil).
%query 1 0 uniform (b # r # b # b # r # nil).
%query 1 0 uniform (r # r # b # r # b # r # nil).

% define the relation gen that given an even nat generates uniform lists of length n
% in which colours alternate
gen : nat -> clist -> type.
gen\base : gen 0 nil.
gen\baseR : gen 2 (r # b # nil).
gen\baseB : gen 2 (b # r # nil).
gen\recR : gen N (r # Cs) -> gen (succ (succ N)) (r # b # r # Cs).
gen\recB : gen N (b # Cs) -> gen (succ (succ N)) (b # r # b # Cs).
%mode gen +N -Cs.
%query 1 1 gen 0 Cs.
%query 2 2 gen 4 Cs.
%query 2 2 gen 8 Cs.

% given the formula
% F ::= True | False | F and F' | F or F'
% the tauto function returns true if the formula is true, or fails otherwise
%
% type oo = T | A of oo * oo | O of oo * oo | F
%
% exception Fail
%
% let rec tauto = function
%     |T -> true
%     | A(p1,p2) -> tauto p1 && tauto p2
%     | O(p1,p2) ->
%         try
%             tauto p1
%         with
%              Fail  -> tauto p2
%     | _ -> raise Fail
%
% let x = tauto <| A(T, T)
% let x1 = tauto <| O(F,T)
% let x2 = tauto <| O(F,F)
%
% code it in Twelf

oo : type.
t : oo.
f : oo.
and : oo -> oo -> oo.
or : oo -> oo -> oo.

tauto : oo -> type.
tauto\base : tauto t.
tauto\and  : tauto E1 -> tauto E2 -> tauto (and E1 E2).
tauto\or1  : tauto E -> tauto (or E _).
tauto\or2  : tauto E -> tauto (or _ E).
%mode tauto +O.
%query 1 * tauto (and t t).
%query 0 * tauto (and t f).
%query 1 * tauto (or t f).
%query 1 * tauto (or f t).


% give a Twelf type for this
% type Col = Red | Misc of col * col | Blue
col  : type.
red  : col.
blue : col.
misc : col -> col -> col.
violet = misc red blue.

% give a Twelf type for this
% type tree<int> = Leaf | Node of int * tree<int> * tree<int>
nattree : type.

leaf    : nattree.
natnode : nat -> nattree -> nattree -> nattree.
% for example as analogous cons is implemented as cons : nat -> natlist -> natlist.
t1 = natnode 4 (natnode 5 leaf leaf) (natnode 5 leaf leaf).

% define contains over a nattree
contains : nat -> nattree -> type.
contains\base : contains N (natnode N _ _).
contains\l : contains N L -> contains N (natnode _ L R).
contains\r : contains N R -> contains N (natnode _ L R).
%mode contains +N +T.
%query 1 1 contains 9 (natnode 4 t1 (natnode 5 leaf (natnode 9 leaf leaf))).
%mode contains -N +T.
%query 6 * contains N (natnode 4 t1 (natnode 5 leaf (natnode 9 leaf leaf))).


% more exercises, yes, why not, till late on the day before the exam
% feels like I've been programming in Twelf for 2 years now :/

sum : nat -> nat -> nat -> type.
sum\base : sum 0 N N.
sum\rec : sum N M S -> sum (succ N) M (succ S).
%mode sum +N +M -S.
%query 1 1 sum 4 2 S.

t2 = natnode 4 t1 (natnode 5 leaf (natnode 9 leaf leaf)).
%       4
%   4      5
% 5   5       9

count : nattree -> nat -> type.
count\leaf : count leaf 0.
count\base : count (natnode _ leaf leaf) 1.
count\l : sum Cl Cr S -> count L Cl -> count R Cr -> count (natnode _ L R) (succ S).
%mode count +T -C.
%query 1 1 count t2 S.


natlist : type.
nil   : natlist.
#     : nat -> natlist -> natlist. %infix right 6 #.

append : natlist -> natlist -> natlist -> type.
append/base : append Xs nil Xs.
append/rec : append Xs Ys Zs -> append Xs (X # Ys) (X # Zs).
%mode append +Xs +Ys -Zs.
%query 1 1 append (3 # 4 # nil) (1 # 2 # nil) Zs.

tolist : nattree -> natlist -> type.
tolist\leaf : tolist leaf nil.
tolist\base : tolist (natnode N leaf leaf) (N # nil).
tolist\rec : append Ls Rs A
              -> tolist L Ls
              -> tolist R Rs
              -> tolist (natnode X L R) (X # A).
%mode tolist +T -L.
%query 1 1 tolist t2 L.


sub : nat -> nat -> nat -> type.
sub\base : sub X 0 X.
sub\rec : sub N M (succ S) -> sub N (succ M) S.
%mode sub +N +M -S.
%query 1 1 sub 4 2 S.
%query 1 1 sub 4 0 S.

