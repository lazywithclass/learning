nat : type.
succ : nat -> nat.
0 : nat.
1 = succ 0.
2 = succ 1.
3 = succ 2.
4 = succ 3.
5 = succ 4.
6 = succ 5.
7 = succ 6.
8 = succ 7.
9 = succ 8.

natList : type.
# : nat -> natList -> natList. %infix right 6 #.
nil : natList.

% remove all occurrencies of an element from a list
neq : nat -> nat -> type.
neq' : neq (succ A) 0.
neq'' : neq 0 (succ A).
neq\rec : neq A B -> neq (succ A) (succ B).
%mode neq +A +B.
%query 1 * neq 0 1.
%query 1 * neq 1 0.
%query 0 * neq 0 0.

removeAll : nat -> natList -> natList -> type.
removeAll\nil : removeAll _ nil nil.
removeAll\rec : removeAll N Xs Ys -> removeAll N (N # Xs) Ys.
removeAll\rec' : neq N M -> removeAll N Xs Ys -> removeAll N (M # Xs) (M # Ys).
%mode removeAll +N +Xs -Ys.
%query 1 * removeAll 1 (3 # 2 # 1 # nil) Ys.
%query 1 * removeAll 1 (3 # 1 # 2 # nil) Ys.
%query 1 * removeAll 1 (1 # 2 # 3 # nil) Ys.
%query 1 * removeAll 4 (1 # 2 # 3 # nil) Ys.
%query 1 * removeAll 2 (1 # 2 # 2 # 3 # nil) Ys.

removeFirst : nat -> natList -> natList -> type.
removeFirst\eq : removeFirst N (N # Xs) Xs.
removeFirst\rec : removeFirst N Xs Ys -> removeFirst N (M # Xs) (M # Ys).
%mode removeFirst +X +Xs -YS.
%query 1 1 removeFirst 1 (1 # 1 # 2 # 3 # nil) Ys.
%query 1 1 removeFirst 3 (1 # 1 # 2 # 3 # nil) Ys.
%query 1 1 removeFirst 2 (1 # 2 # 2 # 3 # nil) Ys.
%query 1 1 removeFirst 1 (1 # 1 # 1 # nil) Ys.

lte : nat -> nat -> type.
lte\0 : lte 0 N.
lte\rec : lte A B -> lte (succ A) (succ B).
%mode lte +A +B.
%query 1 * lte 0 1.
%query 1 * lte 4 5.
%query 1 * lte 1 5.
%query 0 * lte 6 5.
%query 0 * lte 1 0.

gt : nat -> nat -> type.
gt\0 : gt (succ N) 0.
gt\rec : gt A B -> gt (succ A) (succ B).
%mode gt +A +B.
%query 1 * gt 1 0.
%query 1 * gt 3 1.
%query 0 * gt 0 0.
%query 0 * gt 0 3.

% first nat is the amount of nat to remove TR,
% second nat is the amount of nats removed RD,
% third nat is the nat to remove R

% I did not manage to make this work
removeFirstN : nat -> nat -> nat -> natList -> natList -> type.
removeFirstN\eq : lte RD TR -> removeFirstN TR (succ RD) R (R # Xs) Xs.
removeFirstN\rec : lte RD TR ->
                     removeFirstN TR RD R Xs Ys ->
                     removeFirstN TR (succ RD) R (R # Xs) Ys.
removeFirstN\rec' : lte RD TR ->
                     neq R O ->
                     removeFirstN TR RD R Xs Ys ->
                     removeFirstN TR RD R (O # Xs) (O # Ys).
%mode removeFirstN +TR +RD +R +Xs -Ys.
%query 1 * removeFirstN 3 1 2 (1 # 2 # 1 # 2 # 2 # 2 # 2 # nil) Ys.
