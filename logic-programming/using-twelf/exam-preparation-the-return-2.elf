nat : type.
succ : nat -> nat.
0 : nat.
1 = succ 0.
2 = succ 1.
3 = succ 2.
4 = succ 3.
5 = succ 4.
6 = succ 5.
7 = succ 6.
8 = succ 7.
9 = succ 8.

sum : nat -> nat -> nat -> type.
sum\base : sum A 0 A.
sum\rec : sum A B C -> sum A (succ B) (succ C).
%mode sum +A +B -C.
%query 1 * sum 1 2 C.

natList : type.
# : nat -> natList -> natList. %infix right 6 #.
nil : natList.

natMatrix : type.
#' : natList -> natMatrix -> natMatrix. %infix right 6 #'.
nil' : natMatrix.

% define this [[1;2;3]; [4;1]; [5;7;2;1]]

l' = 1 # 2 # 3 # nil.
l'' = 4 # 1 # nil.
l''' = 5 # 7 # 2 # 1 # nil.

matrix = l' #' l'' #' l''' #' nil'.

listLength : natList -> nat -> type.
listLength\nil : listLength nil 0.
listLength\rec : listLength L N -> listLength (_ # L) (succ N).
%mode listLength +L -N.
%query 1 * listLength l' N.

matrixSize : natMatrix -> nat -> type.
matrixSize\nil : matrixSize nil' 0.
matrixSize\rec : sum N N' O ->
                               listLength L N ->
                               matrixSize M N' ->
                               matrixSize (L #' M) O.
%mode matrixSize +M -S.
%query 1 * matrixSize matrix S.
