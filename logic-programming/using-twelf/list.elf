% appends the second list at the end of the first
% given two lists Xs and YS the goal is to have all elements of
% Xs in front of Ys
append : natlist -> natlist -> natlist -> type.
append_nil : append nil Ys Ys.
append_rec : append (X # Xs) Ys (X # Zs)
              <- append Xs Ys Zs.
%mode append +Xs +Ys -Zs.
%query 1 1 append (1 # 2 # 3 # nil) (4 # 5 # 6 # nil) L.
%query 1 1 append (1 # 2 # 3 # nil) nil L.
%query 1 1 append nil (1 # 2 # 3 # nil) L.

% write a relation that expresses the length of a list
len : natlist -> nat -> type.
len_nil : len nil 0.
len_rec : len (X # Xs) (succ L)
           <- len Xs L.
%mode len +Xs -L.
%query 1 1 len nil L.
%query 1 1 len (1 # 2 # 3 # nil) L.

% write a relation that removes all occurrences of a nat
remall : nat -> natlist -> natlist -> type.
remall_nil : remall X nil nil.
remall_rest_eq : remall X (X # Xs) Ys
                <- remall X Xs Ys.
remall_rest_neq : remall X (Y # Xs) (Y # Ys)
                 <- neq X Y
                 <- remall X Xs Ys.
%mode remall +X +Xs -Ys.
%query 1 1 remall 1 (1 # nil) Xs.
%query 1 1 remall 1 (1 # 2 # nil) Xs.
%query 1 1 remall 1 (1 # 2 # 3 # 1 # nil) Xs.

% write a relation that removes just the first occurrence of a nat
% the trick is to put the item in the base case so there's no recursion there
% and it's done only once
remfirst : nat -> natlist -> natlist -> type.
remafirst : nat -> natlist -> natlist -> type.
remafirst_nil : remfirst X nil nil.
remafirst_base : remfirst X (X # Xs) Xs.
remafirst_rec : remfirst X (Y # Xs) (Y # Ys)
                 <- remfirst X Xs Ys.
%mode remfirst +X +Xs -Ys.
%query 1 1 remfirst 1 nil Xs.
%query 1 1 remfirst 1 (1 # nil) Xs.
%query 1 1 remfirst 1 (1 # 2 # nil) Xs.
%query 1 1 remfirst 1 (1 # 1 # 2 # 3 # 1 # nil) Xs.

contains : nat -> natlist -> type.
contains_base : contains X (X # _).
contains_rec : contains X (_ # Xs)
                <- contains X Xs.
%mode contains +X +Xs.
%query 1 1 contains 1 (1 # 2 # nil).
%query 1 1 contains 3 (1 # 2 # 3 # nil).
%query 0 * contains 4 (1 # 2 # 3 # nil).

% leverages the nature of the accumulator
reverse_acc : natlist -> natlist -> natlist -> type.
reverse_nil : reverse_acc nil Acc Acc.
reverse_rec : reverse_acc (X # Xs) Acc R
               <- reverse_acc Xs (X # Acc) R.
%query 1 1 reverse_acc (1 # 2 # 3 # nil) nil R.

% reverse without acc
reverse : natlist -> natlist -> type.
reverse_base : reverse nil nil.
reverse_rec  : reverse (X # Xs) Rs'
                <- reverse Xs Rs
                <- append Rs (X # nil) Rs'.
%mode reverse +X -R.
%query 1 1 reverse (1 # 2 # 3 # nil) R.

notContains : nat -> natlist -> type.
notContains_nil : notContains _ nil.
notContains_rec : notContains X (Y # Ys)
                   <- neq X Y
                   <- notContains X Ys.
%mode notContains +X +Xs.
%query 1 1 notContains 1 (2 # 3 # nil).
%query 0 * notContains 1 (1 # 2 # nil).

filterEven : natlist -> natlist -> type.
filterEven_nil : filterEven nil nil.
filterEven_even : filterEven (X # Xs) (X # Es)
                  <- isEven X
                  <- filterEven Xs Es.
filterEven_odd : filterEven (X # Xs) Es
                  <- isOdd X
                  <- filterEven Xs Es.
%mode filterEven +Xs -Es.
%query 1 1 filterEven (1 # 2 # 3 # 4 # 5 # 6 # nil) Es.

asSet : natlist -> natlist -> type.
asSet_nil : asSet nil nil.
asSet_contained : asSet (X # Xs) Ss
                   <- asSet Xs Ss
                   <- contains X Ss.
asSet_!contained : asSet (X # Xs) (X # Ss)
                    <- asSet Xs Ss
                    <- notContains X Ss.
%mode asSet +Xs -Ss.
%query 1 1 asSet (1 # 2 # 1 # 3 # 3 # nil) Ss.

% write a relation that shifts all elements to the right by one position
% the last re-enters as first element
last : natlist -> nat -> type.
last_nil : last (X # nil) X.
last_rec : last (Uncas # Mohicans) Chingachgook
            <- last Mohicans Chingachgook.
%mode last +Xs -L.
%query 1 1 last (1 # 2 # 3 # nil) L.
%query 1 1 last (1 # nil) L.
%query 0 1 last nil L.

butlast : natlist -> natlist -> type.
butlast_nil : butlast (X # nil) nil.
butlast_rec : butlast (X # Xs) (X # Ys)
               <- butlast Xs Ys.
%mode butlast +Xs -Ys.
%query 1 1 butlast (1 # 2 # 3 # nil) Ys.
%query 0 * butlast nil Ys.

shift : natlist -> natlist -> type.
shift_nil : shift (X # nil) (X # nil).
shift_rec : shift (X # Xs) (L # (X # Ys))
             <- butlast Xs Ys
             <- last Xs L
             <- shift Xs SXs.
%mode shift +Xs -Ss.
%query 1 1 shift (1 # 2 # 3 # nil) Ss.
%query 1 1 shift (1 # 3 # nil) Ss.

% jessibit's approach that allows for a variable number of shifts
deleteLast : natlist -> natlist -> type.
deleteLast/base : deleteLast (X # nil) nil.
deleLast/base : deleteLast Xs Ys
                 -> deleteLast (X # Xs) (X # Ys).
%mode deleteLast +Xs -Ys.
%query 1 1 deleteLast (1 # 2 # 3 # nil) Ys.

% append L1 L2 appends L1 after L2
appendJ : natlist -> natlist -> natlist -> type.
appBase : appendJ Xs nil Xs.
appRec : appendJ Xs Ys Zs
          -> appendJ Xs (Y # Ys) (Y # Zs).
%mode appendJ -Xs -Ys +Zs.

shiftRight : natlist -> nat -> natlist -> type.
shiftRight/base : appendJ (X # nil) Zs Xs
                   -> deleteLast Xs Ys
                   -> shiftRight Xs 1 (X # Ys).
shiftRight/rec : appendJ (X # nil) Ks Ys
                  -> deleteLast Ys Zs
                  -> shiftRight Xs N Ys
                  -> shiftRight Xs (succ N) (X # Zs).
%mode shiftRight +Xs +N -Ys.
%query 1 1 shiftRight (1 # 2 # 3 # nil) 2 Zs.

% insert the first at the right of the second in the list
insertR : nat -> nat -> natlist -> natlist -> type.
insertR_nil : insertR X Y nil nil.
insertR_rec_eq : insertR X Y (Y # Xs) (Y # (X # Ys))
                  <- insertR X Y Xs Ys.
insertR_rec_neq : insertR X Y (Y' # Xs) (Y' # Ys)
                   <- neq Y Y'
                   <- insertR X Y Xs Ys.
%mode insertR +I +R +Xs -Ys.
%query 1 1 insertR 2 1 (1 # 3 # nil) Ys.
%query 1 1 insertR 2 1 (2 # 3 # nil) Ys.

% relations I wasn't able to implement
% write a relation that removes just the nth occurrence of a nat
% write a relation that removes n occurrences of a nat
