nat : type.
natlist : type.
cons : nat -> natlist -> natlist.
nil : natlist.
succ : nat -> nat.
0 : nat.
1 = succ 0.
2 = succ 1.
3 = succ 2.
4 = succ 3.
5 = succ 4.
6 = succ 5.
7 = succ 6.
8 = succ 7.
9 = succ 8.


% given a list filter all even numbers

iseven : nat -> type.
iseven\base : iseven 0.
iseven\rec : iseven N -> iseven (succ (succ N)).
%mode iseven +N.

isodd : nat -> type.
isodd\gen : iseven N -> isodd (succ N).
%mode isodd +N.

filtereven : natlist -> natlist -> type.
filtereven\base : filtereven nil nil.
filtereven\recE : filtereven Xs Ys -> iseven X -> filtereven (cons X Xs) (cons X Ys).
filtereven\recO : filtereven Xs Ys -> isodd X -> filtereven (cons X Xs) Ys.
%mode filtereven +L -F.
%query 1 1 filtereven (cons 1 (cons 2 (cons 3 (cons 4 nil)))) F.
