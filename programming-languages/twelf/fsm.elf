state: type.    % stato dell'automa
symbol : type.  % simbolo dell'alfabeto
word : type.    % parola

emptyWord : word.
# : symbol -> word -> word. %infix right 8 #.

% transition function
delta : state -> symbol -> state -> type.
%mode delta +Sin +Sy -Sout.

initial : state -> type.
%mode initial -S.
final : state -> type.
%mode final +S.

run : word -> state -> type.
% run Word Q  <=>  Word is accepted starting from Q

% if Q is the final state then emptyWord is the only accepted word
run/stop : run emptyWord Q
                <- final Q.
% if Word is not emptyWord then a transition step is executed
run/trans : run (Symb # W) Q
               <- delta Q Symb Q'
               <- run W Q'.
%mode run +EW +Q.

accepts : word -> type.
ac : accepts W
      <- initial Q0
      <- run W Q0.
%mode accepts +W.

% example

a : symbol.
b : symbol.
c : symbol.
d : symbol.

q0 : state.
q1 : state.
q2 : state.

in : initial q0.
fm : final q2.

delta/0a1 : delta q0 a q1.
delta/1b2 : delta q1 d q2.
delta/1b1 : delta q1 b q1.
delta/1c1 : delta q1 c q1.

% test
%query 1 * accepts (a # d # emptyWord).
%query 1 * accepts (a # b # d # emptyWord).
%query 1 * accepts (a # b # c # c # b # d # emptyWord).

% accepts only generates words with repeated symbols, write laccepts (length accepts)
% that generates all words with length N accepted by the FSM

nat : type.
natlist : type.
nil : natlist.

cons : nat -> natlist -> natlist.

succ : nat -> nat.
0 : nat.
1 = succ 0.
2 = succ 1.
3 = succ 2.
4 = succ 3.
5 = succ 4.
6 = succ 5.
7 = succ 6.
8 = succ 7.
9 = succ 8.

getSymb : symbol -> type.
getA : getSymb a.
getB : getSymb b.
getC : getSymb c.
getD : getSymb d.
%mode getSymb -S.

genWord : nat -> word -> type.
genWord/base : genWord 0 emptyWord.
genWord/rec : genWord N Xs -> getSymb S -> genWord (succ N) (S # Xs).
%mode genWord +N -Xs.
%query 24 24 genWord 4 Xs.

% try to generate words that start and end with a character
startswith : symbol -> word -> type.
startswith\head : startswith H (H # _).
%mode startswith +S +W.

endswith : symbol -> word -> type.
endswith\base : endswith L (L # emptyWord).
endswith\rec : endswith L W -> endswith L (_ # W).
%mode endswith +S +W.

laccepts : nat -> word -> type.
lacceptsGen : accepts W -> genWord N W -> laccepts N W.
%mode laccepts +N -W.
%query 4 * laccepts 4 Ws.
%mode laccepts +N -W.
